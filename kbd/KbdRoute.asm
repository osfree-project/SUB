;/*!
;   @file
;
;   @brief Kbd Router
;
;   (c) osFree Project 2018-2022, <http://www.osFree.org>
;   for licence see licence.txt in root directory, or project website
;
;   @author Yuri Prokushev (yuri.prokushev@gmail.com)
;
;*/

.8086

		; OS/2
		INCL_KBD	EQU	1
		include bsesub.inc

;------------------------------------------------------------KBD
@KBDPROLOG	MACRO	NAME


		PUBLIC	NAME

DELTA		=	0

@CATSTR(NAME,KBDARGS)		STRUC
		ENDM

;----------------------------------------------------------------------

@KBDSTART	MACRO	NAME

@CATSTR(NAME,KBDARGS)		ENDS
argsize=SIZE @CATSTR(NAME,KBDARGS)
@CATSTR(NAME,KBD_ARG_SIZE)	EQU	argsize

NAME		PROC	FAR

		ENDM

;------------------------------------------------------------

@KBDEPILOG		MACRO	NAME
		RET	@CATSTR(NAME,KBD_ARG_SIZE)
NAME		ENDP
		ENDM

@KBDROUTE	MACRO	FUNC
			MOV	AX, @CATSTR(FC_, FUNC)
			PUSH	AX
			MOV	AX, _DATA
			MOV	ES, AX
			MOV	AX, WORD PTR ES:KBDFUNCTIONMASK
			AND	AX, LOWWORD @CATSTR(KR_, FUNC)
			CMP	AX, LOWWORD @CATSTR(KR_, FUNC)
			CALL    KBDROUTE
			ENDM

@KBDPROC	MACRO	NAME, ARGS: VARARG

		@KBDPROLOG	NAME
		FOR ARG, <ARGS>
			ARG
		ENDM
		@KBDSTART	NAME
		CALL	@CATSTR(Pre, NAME)
		@KBDROUTE	NAME
		CALL	@CATSTR(Post, NAME)
		@KBDEPILOG	NAME

			ENDM


		PUBLIC	KBDROUTE
		PUBLIC	KBDFUNCTIONMASK
		PUBLIC	AKSMAIN
		PUBLIC	AKSHANDLE


_DATA		SEGMENT BYTE PUBLIC 'DATA' USE16

AKSMAIN			DD	?	; AKSMAIN far address
AKSHANDLE		DW	?	; AKSHANDLE module handle
KBDFUNCTIONMASK		DD	0	; KBD FUNCTIONS REDIRECTION MASK

_DATA		ENDS

EXTERN	PreKBDROUTE: PROC
EXTERN	PostKBDROUTE: PROC
EXTERN	PreKBDCHARIN: PROC
EXTERN	PostKBDCHARIN: PROC
EXTERN	PreKBDCLOSE: PROC
EXTERN	PostKBDCLOSE: PROC
EXTERN	PreKBDFLUSHBUFFER: PROC
EXTERN	PostKBDFLUSHBUFFER: PROC
EXTERN	PreKBDFREEFOCUS: PROC
EXTERN	PostKBDFREEFOCUS: PROC
EXTERN	PreKBDGETCP: PROC
EXTERN	PostKBDGETCP: PROC
EXTERN	PreKBDGETFOCUS: PROC
EXTERN	PostKBDGETFOCUS: PROC
EXTERN	PreKBDGETHWID: PROC
EXTERN	PostKBDGETHWID: PROC
EXTERN	PreKBDGETSTATUS: PROC
EXTERN	PostKBDGETSTATUS: PROC
EXTERN	PreKBDOPEN: PROC
EXTERN	PostKBDOPEN: PROC
EXTERN	PreKBDPEEK: PROC
EXTERN	PostKBDPEEK: PROC
EXTERN	PreKBDSETCP: PROC
EXTERN	PostKBDSETCP: PROC
EXTERN	PreKBDSETCUSTXT: PROC
EXTERN	PostKBDSETCUSTXT: PROC
EXTERN	PreKBDSETSTATUS: PROC
EXTERN	PostKBDSETSTATUS: PROC
EXTERN	PreKBDSTRINGIN: PROC
EXTERN	PostKBDSTRINGIN: PROC
EXTERN	PreKBDXLATE: PROC
EXTERN	PostKBDXLATE: PROC

EXTERN		BKSMAIN: PROC

_TEXT		SEGMENT BYTE PUBLIC 'CODE' USE16

@KBDPROC	KBDCHARIN, KBDHANDLE DW ?, IOWAIT DW ?, CHARDATA DD ?
@KBDPROC	KBDCLOSE, KBDHANDLE DW ?
@KBDPROC	KBDFLUSHBUFFER, KBDHANDLE DW ?
@KBDPROC	KBDFREEFOCUS, KBDHANDLE DW ?
@KBDPROC	KBDGETCP, KBDHANDLE DW ?, CODEPAGEID DD ?, RESERVED DD ?
@KBDPROC	KBDGETFOCUS, KBDHANDLE DW ?, IOWAIT DW ?
@KBDPROC	KBDGETHWID, KBDHANDLE DW ?, KEYBOARDID DD ?, RESERVED DD ?
@KBDPROC	KBDGETSTATUS, KBDHANDLE DW ?, STATDATA DD ?
@KBDPROC	KBDOPEN, KBDHANDLE DW ?
@KBDPROC	KBDPEEK, KBDHANDLE DW ?, CHARDATA DD ?
@KBDPROC	KBDSETCP, KBDHANDLE DW ?, CODEPAGEID DD ?, RESERVED DD ?
@KBDPROC	KBDSETCUSTXT, KBDHANDLE DW ?, XLATETABLE DD ?
@KBDPROC	KBDSETSTATUS, KBDHANDLE DW ?, STATDATA DD ?
@KBDPROC	KBDSTRINGIN, KBDHANDLE DW ?, IOWAIT DW ?, STRINGLENGTH DD ?, CHARBUFFER DD ?
@KBDPROC	KBDXLATE, KBDHANDLE DW ?, XLATERECORD DD ?

KBDROUTE	PROC	NEAR
		CALL	PreKbdRoute
		JNZ	BKS		; Skip if AKS not registered
;Call alternate keyboard subsystem if function routed
		PUSH	DS		; caller data segment
		XOR	AX,AX
		MOV	AX, SEG _DATA
		MOV	ES, AX
		CALL	[ES:AKSMAIN]
		POP	DS
; Return code = 0 
;           No error.  Do not invoke the corresponding Base Keyboard Subsystem 
;           routine.  Return to caller with Return code = 0. 
; Return code = -1 
;           No error.  Invoke the corresponding Base Keyboard Subsystem 
;           routine. Return to caller with Return code = return code from 
;           Base Keyboard Subsystem. 
; Return code = error (not 0 or -1) 
;           Do not invoke the corresponding Base Keyboard Subsystem routine. 
;           Return to caller with Return code = error. 
		CMP	AX, 0
		JZ	@F
		CMP	AX, -1
		JNZ	@F
BKS:
		PUSH	DS		; caller data segment
		XOR	AX,AX
		CALL	FAR PTR BKSMAIN
		POP	DS
@@:
		CALL	PostKbdRoute
		RET	2
KBDROUTE	ENDP

_TEXT		ENDS
		END
